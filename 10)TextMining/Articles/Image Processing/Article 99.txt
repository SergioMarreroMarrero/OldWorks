Edge-Preserving Image Denoising via Group Coordinate Descent on the GPU,

# Image denoising is a fundamental operation in image processing, and its applications range from the direct (photographic enhancement) to the technical (as a subproblem in image reconstruction algorithms). In many applications, the number of pixels has continued to grow, while the serial execution speed of computational hardware has begun to stall. New image processing algorithms must exploit the power offered by massively parallel architectures like graphics processing units (GPUs). This paper describes a family of image denoising algorithms well-suited to the GPU. The algorithms iteratively perform a set of independent, parallel 1D pixel-update subproblems. To match GPU memory limitations, they perform these pixel updates in-place and only store the noisy data, denoised image, and problem parameters. The algorithms can handle a wide range of edge-preserving roughness penalties, including differentiable convex penalties and anisotropic total variation. Both algorithms use the majorize-minimize framework to solve the 1D pixel update subproblem. Results from a large 2D image denoising problem and a 3D medical imaging denoising problem demonstrate that the proposed algorithms converge rapidly in terms of both iteration and run-time.

{graphics processing units;image denoising;minimisation;parallel architectures;1D pixel update subproblem;2D image denoising problem;3D medical imaging denoising problem;GPU memory limitations;anisotropic total variation;computational hardware;differentiable convex penalties;edge-preserving image denoising;edge-preserving roughness penalties;graphics processing units;group coordinate descent;image processing;majorize-minimize framework;massively parallel architectures;parallel 1D pixel-update subproblems;serial execution speed;Algorithm design and analysis;Cost function;Graphics processing units;Hardware;Image denoising;Image edge detection;Noise reduction;Image denoising;iterative algorithms;optimization;parallel algorithms},



